class node:
    def __init__(self,value):
        self.value=value
        self.right=None
        self.left=None
    

arr=[2,1,3,5,4,6,8,7]
def build_BST(key,root):
    if root==None:
        return node(key)
    else:
        if key<=root.value:
            print key,root.value
            root.left=build_BST(key,root.left)
            print root.left.value,"Left"
        else:
            print key,root.value,"key and root.value"
            root.right=build_BST(key,root.right)
            print root.right.value,"Right"
    return root        
        
    
def printtree(root,level):
    level+=1
    if root==None:
        return None
    else:
        
        printtree(root.left,level)
        print root.value, "parent node",level-1
        printtree(root.right,level)
        
Node=None

for i in range(len(arr)):
    print "--------------------------------"
    Node=build_BST(arr[i],Node)
    printtree(Node,0)
print ";;;;;;;;;;;;;;;;;;;;;;;;;;"
root=Node   
build_BST(0,root)
printtree(root,0)

def delNode(root, key):
    if root.value==key:
        if root.left==None:
            return root.right
        elif root.right==None:
            return root.left
        else:
            temp=minsubtree(root.right)
            root.key=temp.key
            root.right=delNode(root.right, temp.key)
    if root.value>key:
        root.left=delNode(root.left, key)  
    if root.value<key:
        root.right=delNode(root.right, key)  
    return root
def minsubtree(node):
    if node!=None:
        while(node.left):
            node=node.left
        return node.value
print ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"    
root=delNode(root,4 )    
printtree(root,0)
